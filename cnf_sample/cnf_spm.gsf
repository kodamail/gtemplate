*
* sample configuration file for latzm.gs
*
* (all the variables should have global scope)
*
function cnf_spm()
*x  rc = gsfpath( '/cwork5/kodama/gscript/run_list' )
  rc = gsfpath( 'database' )

*
*----- Variable
*
* _varid: unique id for each variable
*
_varid = 't2m'
_varid = 'land_wg1'
_varid = 'land_wg5'

*
*----- Display style
*
* target file number for difference (-1: no show)
*_diff = -1
_diff = 1


*
*----- Time
*
* _time_start: start time for averaging
*              e.g. '06z01jun2004', '01jun2004', 'jan2000'
* _time_end  : end time for averaging
* _time_endpp: end time plus one timestep for averaging
*
* _clim_arg: arguements for clave
*             e.g. 'dec%y feb%ypp 1980 1989'
*
* _year : 4-digit year or 'clim' for climatological mean
* _month: 1- or 2-digit month or 3-digit season such as '678' for JJA.
*
* _year_start: start year for _year='clim'
* _year_end  : end year for _year='clim'
*
* .f: valid only for f-th dataset
*
* [usage and priority]
*   1.1. (_time_start.f,_time_end.f)  : time mean
*   1.2. (_time_start.f,_time_endpp.f): time mean
*   2.   (_year.f,_month.f)           : monthly or seasonal mean (<-TODO)
*   3.   (_clim_arg.f)                : climatological mean
*   4.   (_time_start,_time_endpp)    : time mean
*   5.   (_year,_month)               : monthly or seasonal mean
*   5.   (_year='clim',_year_start,_year_end,_month)
*                                     : climatological monthly or seasonal mean
*
* 1. time mean
*
*_time_start = '06z01jun2004' ; _time_endpp = '00z01jul2004'
_time_start = '01jun2004' ; _time_endpp = '01sep2005'
*_time_start = 'jun2004' ; _time_endpp = 'jun2005'

*
*----- Space to average
*
*_region = 'global'
_region = 'nh'
*_region = 'sh'
*_region = 'nhmid'
*_region = 'shmid'
*_region = 'nhhigh'
*_region = 'shhigh'

_lsmask = 'all'
*_lsmask = 'lnd'
*_lsmask = 'ocn'


*_region = 'none'
*_latmin = 30
*_latmax = 60
*_lonmin = 0
*_lonmax = 360



***************************************************************
* Open list
***************************************************************
* _time_start.f & _time_end.f will be set from month without explicitly specifying.

f = 1
***************************************************************


***************************************************************
if( 1 != 1 )
*  cdir = 'sl/288x145/tstep'
  cdir = 'sl/288x145/1dy_mean'
  ret = run_list( 'JRA55v2 '_varid' 'cdir )
  _run.f = subwrd( ret, 2 )
  _var.f = subwrd( ret, 4 )
  if( _var.f != '' ) ; _f2df.f = last() ; f = f + 1 ; endif
endif

***************************************************************
if( 1 = 1 )
*  cdir = 'sl/288x145/1dy_mean'
  cdir = 'll/288x145/tstep'
  ret = run_list( 'K.200406.N15.5v2.gl09.s '_varid' -cdir 'cdir )
  _run.f = subwrd( ret, 2 )
  _var.f = subwrd( ret, 4 )
*  _ccolor.f = 2 ; _cstyle.f = 1 ; _cthick.f = 6
  if( _var.f != '' ) ; _f2df.f = last() ; f = f + 1 ; endif
endif

***************************************************************
if( 1 = 1 )
*  cdir = 'sl/288x145/1dy_mean'
  cdir = 'll/288x145/tstep'
  ret = run_list( 'K.200406.N15.5v2.gl09.s.003 '_varid' -cdir 'cdir )
  _run.f = subwrd( ret, 2 )
  _var.f = subwrd( ret, 4 )
*  _ccolor.f = 2 ; _cstyle.f = 1 ; _cthick.f = 6
  if( _var.f != '' ) ; _f2df.f = last() ; f = f + 1 ; endif
endif


***************************************************************
_fmax = f - 1


*
*----- save as image
*
* _save: output image file name (default: none)
*
if( _month < 100 ) ; month2 = printf( '%02d', _month ) ; endif
if( _month = 345 ) ; month2 = 'MAM' ; endif
if( _month = 678 ) ; month2 = 'JJA' ; endif
if( _month = 901 ) ; month2 = 'SON' ; endif
if( _month = 212 ) ; month2 = 'DJF' ; endif
if( _month = 999 ) ; month2 = 'ANU' ; endif
*
dir = 'figures/'_run.1
r = 2
while( _run.r != '' & _run.r != '_run.'r & r <= 5 )
  dir = dir % '_vs_'_run.r
  r = r + 1
endwhile
'!mkdir -p 'dir
*
*_save = dir'/spm_' % _varid % '_' % _year % '_' % month2
*_save = dir'/spm_' % _varid % '_' % _region % '_' % _lsmask % '_' % _year % '_' % month2
_save = dir'/spm_' % _varid % '_' % _region % '_' % _lsmask
*_save = ''

* override varcnf if necessary


return
